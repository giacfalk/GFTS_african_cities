theta.hat
sqrt(mean((theta.hat-theta0)**2))
sqrt(mean((data_bic_minimising_lambda$mu.hat-mi)**2))
devtools::install_github("https://github.com/ipeaGIT/gtfs2gps")
install.packages("rlang")
devtools::install_github("https://github.com/ipeaGIT/gtfs2gps")
library(gtfs2gps)
install.packages("rlang")
install.packages("gtfs2gps")
install.packages("gtfs2gps")
library(gtfs2gps)
README.md
Home / GitHub / mem48/UK2GTFS / R/gtfs_merge.R
R/gtfs_merge.R
In mem48/UK2GTFS: Converts UK transport timetable datasets to GTFS format
Defines functions gtfs_merge
Documented in gtfs_merge
#' merge a list of gtfs files
#'
#' @param gtfs_list a list of gtfs objects to be merged
#' @export
gtfs_merge <- function(gtfs_list) {
# remove any NULLS
gtfs_list <- gtfs_list[lengths(gtfs_list) != 0]
# Split out lists
agency <- sapply(gtfs_list, "[", "agency")
stops <- sapply(gtfs_list, "[", "stops")
routes <- sapply(gtfs_list, "[", "routes")
trips <- sapply(gtfs_list, "[", "trips")
stop_times <- sapply(gtfs_list, "[", "stop_times")
calendar <- sapply(gtfs_list, "[", "calendar")
calendar_dates <- sapply(gtfs_list, "[", "calendar_dates")
# bind togther
names(agency) <- seq(1, length(agency))
suppressWarnings(agency <- dplyr::bind_rows(agency, .id = "file_id"))
names(stops) <- seq(1, length(stops))
suppressWarnings(stops <- dplyr::bind_rows(stops, .id = "file_id"))
names(routes) <- seq(1, length(routes))
suppressWarnings(routes <- dplyr::bind_rows(routes, .id = "file_id"))
names(trips) <- seq(1, length(trips))
suppressWarnings(trips <- dplyr::bind_rows(trips, .id = "file_id"))
names(stop_times) <- seq(1, length(stop_times))
suppressWarnings(stop_times <- dplyr::bind_rows(stop_times, .id = "file_id"))
names(calendar) <- seq(1, length(calendar))
suppressWarnings(calendar <- dplyr::bind_rows(calendar, .id = "file_id"))
names(calendar_dates) <- seq(1, length(calendar_dates))
suppressWarnings(calendar_dates <- dplyr::bind_rows(calendar_dates, .id = "file_id"))
# fix typo
agency$agency_name[agency$agency_name == "Dockland Light Railway"] <- "Docklands Light Railway"
# agency
agency$file_id <- NULL
agency <- unique(agency)
if (any(duplicated(agency$agency_id))) {
# Check for upppercase problems
# Sometime same agency with a captial letter in the name
agency.check <- agency
agency.check$agency_name <- tolower(agency.check$agency_name)
agency.check <- unique(agency.check)
if (any(duplicated(agency.check$agency_id))) {
stop("Duplicated Agency IDS")
} else {
agency <- agency[!duplicated(agency$agency_id), ]
}
}
# stops
stops$file_id <- NULL
stops <- unique(stops)
if (any(duplicated(stops$stop_id))) {
stop("Duplicated Stop IDS")
}
# routes
if (any(duplicated(routes$route_id))) {
message("De-duplicating route_id")
route_id <- routes[, c("file_id", "route_id")]
if (any(duplicated(route_id))) {
stop("Duplicated route_id within the same GTFS file")
}
route_id$route_id_new <- seq(1, nrow(route_id))
routes <- dplyr::left_join(routes, route_id, by = c("file_id", "route_id"))
routes <- routes[, c("route_id_new", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type")]
names(routes) <- c("route_id", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type")
}
# calendar
if (any(duplicated(calendar$service_id))) {
message("De-duplicating service_id")
service_id <- calendar[, c("file_id", "service_id")]
if (any(duplicated(service_id))) {
stop("Duplicated service_id within the same GTFS file")
}
service_id$service_id_new <- seq(1, nrow(service_id))
calendar <- dplyr::left_join(calendar, service_id, by = c("file_id", "service_id"))
calendar <- calendar[, c("service_id_new", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")
calendar_dates <- dplyr::left_join(calendar_dates, service_id, by = c("file_id", "service_id"))
calendar_dates <- calendar_dates[, c("service_id_new", "date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
}
# Trips
if (any(duplicated(trips$trip_id))) {
message("De-duplicating trip_id")
trip_id <- trips[, c("file_id", "trip_id")]
if (any(duplicated(trip_id))) {
stop("Duplicated trip_id within the same GTFS file")
}
trip_id$trip_id_new <- seq(1, nrow(trip_id))
trips <- dplyr::left_join(trips, trip_id, by = c("file_id", "trip_id"))
trips <- trips[, c("route_id", "service_id", "trip_id_new", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
stop_times <- dplyr::left_join(stop_times, trip_id, by = c("file_id", "trip_id"))
stop_times <- stop_times[, c("trip_id_new", "arrival_time", "departure_time", "stop_id", "stop_sequence", "timepoint")]
names(stop_times) <- c("trip_id", "arrival_time", "departure_time", "stop_id", "stop_sequence", "timepoint")
}
if (exists("service_id")) {
trips <- dplyr::left_join(trips, service_id, by = c("file_id", "service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
}
if (exists("route_id")) {
trips <- dplyr::left_join(trips, route_id, by = c("file_id", "route_id"))
trips <- trips[, c("route_id_new", "service_id", "trip_id", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
}
trips <- trips[, c("route_id", "service_id", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
# Condense Duplicate Service patterns
message("Condensing duplicated servie patterns")
calendar_dates_summary <- dplyr::group_by(calendar_dates, service_id)
calendar_dates_summary <- dplyr::summarise(calendar_dates_summary,
pattern = paste(c(date, exception_type), collapse = "")
)
calendar_summary <- dplyr::left_join(calendar, calendar_dates_summary, by = "service_id")
calendar_summary <- dplyr::group_by(
calendar_summary,
start_date, end_date, monday, tuesday, wednesday,
thursday, friday, saturday, sunday, pattern
)
calendar_summary$service_id_new <- dplyr::group_indices(calendar_summary)
calendar_summary <- calendar_summary[, c("service_id_new", "service_id")]
trips <- dplyr::left_join(trips, calendar_summary, by = c("service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
calendar <- dplyr::left_join(calendar, calendar_summary, by = c("service_id"))
calendar <- calendar[, c("service_id_new", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")
calendar <- calendar[!duplicated(calendar$service_id), ]
calendar_dates <- dplyr::left_join(calendar_dates, calendar_summary, by = c("service_id"))
calendar_dates <- calendar_dates[, c("service_id_new", "date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
calendar_dates <- calendar_dates[!duplicated(calendar_dates$service_id), ]
stop_times$file_id <- NULL
routes$file_id <- NULL
res_final <- list(agency, stops, routes, trips, stop_times, calendar, calendar_dates)
names(res_final) <- c("agency", "stops", "routes", "trips", "stop_times", "calendar", "calendar_dates")
return(res_final)
}
mem48/UK2GTFS documentation built on Sept. 23, 2019, 6:05 p.m.
R Package Documentation
rdrr.io home
R language documentation
Run R code online
Browse R Packages
CRAN packages
Bioconductor packages
R-Forge packages
GitHub packages
We want your feedback!
Note that we can't provide technical support on individual packages. You should contact the package authors for that.
GitHub issue tracker
ian@mutexlabs.com
Personal blog
README.md
Home / GitHub / mem48/UK2GTFS / R/gtfs_merge.R
R/gtfs_merge.R
In mem48/UK2GTFS: Converts UK transport timetable datasets to GTFS format
Defines functions gtfs_merge
Documented in gtfs_merge
#' merge a list of gtfs files
#'
#' @param gtfs_list a list of gtfs objects to be merged
#' @export
gtfs_merge <- function(gtfs_list) {
# remove any NULLS
gtfs_list <- gtfs_list[lengths(gtfs_list) != 0]
# Split out lists
agency <- sapply(gtfs_list, "[", "agency")
stops <- sapply(gtfs_list, "[", "stops")
routes <- sapply(gtfs_list, "[", "routes")
trips <- sapply(gtfs_list, "[", "trips")
stop_times <- sapply(gtfs_list, "[", "stop_times")
calendar <- sapply(gtfs_list, "[", "calendar")
calendar_dates <- sapply(gtfs_list, "[", "calendar_dates")
# bind togther
names(agency) <- seq(1, length(agency))
suppressWarnings(agency <- dplyr::bind_rows(agency, .id = "file_id"))
names(stops) <- seq(1, length(stops))
suppressWarnings(stops <- dplyr::bind_rows(stops, .id = "file_id"))
names(routes) <- seq(1, length(routes))
suppressWarnings(routes <- dplyr::bind_rows(routes, .id = "file_id"))
names(trips) <- seq(1, length(trips))
suppressWarnings(trips <- dplyr::bind_rows(trips, .id = "file_id"))
names(stop_times) <- seq(1, length(stop_times))
suppressWarnings(stop_times <- dplyr::bind_rows(stop_times, .id = "file_id"))
names(calendar) <- seq(1, length(calendar))
suppressWarnings(calendar <- dplyr::bind_rows(calendar, .id = "file_id"))
names(calendar_dates) <- seq(1, length(calendar_dates))
suppressWarnings(calendar_dates <- dplyr::bind_rows(calendar_dates, .id = "file_id"))
# fix typo
agency$agency_name[agency$agency_name == "Dockland Light Railway"] <- "Docklands Light Railway"
# agency
agency$file_id <- NULL
agency <- unique(agency)
if (any(duplicated(agency$agency_id))) {
# Check for upppercase problems
# Sometime same agency with a captial letter in the name
agency.check <- agency
agency.check$agency_name <- tolower(agency.check$agency_name)
agency.check <- unique(agency.check)
if (any(duplicated(agency.check$agency_id))) {
stop("Duplicated Agency IDS")
} else {
agency <- agency[!duplicated(agency$agency_id), ]
}
}
# stops
stops$file_id <- NULL
stops <- unique(stops)
if (any(duplicated(stops$stop_id))) {
stop("Duplicated Stop IDS")
}
# routes
if (any(duplicated(routes$route_id))) {
message("De-duplicating route_id")
route_id <- routes[, c("file_id", "route_id")]
if (any(duplicated(route_id))) {
stop("Duplicated route_id within the same GTFS file")
}
route_id$route_id_new <- seq(1, nrow(route_id))
routes <- dplyr::left_join(routes, route_id, by = c("file_id", "route_id"))
routes <- routes[, c("route_id_new", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type")]
names(routes) <- c("route_id", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type")
}
# calendar
if (any(duplicated(calendar$service_id))) {
message("De-duplicating service_id")
service_id <- calendar[, c("file_id", "service_id")]
if (any(duplicated(service_id))) {
stop("Duplicated service_id within the same GTFS file")
}
service_id$service_id_new <- seq(1, nrow(service_id))
calendar <- dplyr::left_join(calendar, service_id, by = c("file_id", "service_id"))
calendar <- calendar[, c("service_id_new", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")
calendar_dates <- dplyr::left_join(calendar_dates, service_id, by = c("file_id", "service_id"))
calendar_dates <- calendar_dates[, c("service_id_new", "date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
}
# Trips
if (any(duplicated(trips$trip_id))) {
message("De-duplicating trip_id")
trip_id <- trips[, c("file_id", "trip_id")]
if (any(duplicated(trip_id))) {
stop("Duplicated trip_id within the same GTFS file")
}
trip_id$trip_id_new <- seq(1, nrow(trip_id))
trips <- dplyr::left_join(trips, trip_id, by = c("file_id", "trip_id"))
trips <- trips[, c("route_id", "service_id", "trip_id_new", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
stop_times <- dplyr::left_join(stop_times, trip_id, by = c("file_id", "trip_id"))
stop_times <- stop_times[, c("trip_id_new", "arrival_time", "departure_time", "stop_id", "stop_sequence", "timepoint")]
names(stop_times) <- c("trip_id", "arrival_time", "departure_time", "stop_id", "stop_sequence", "timepoint")
}
if (exists("service_id")) {
trips <- dplyr::left_join(trips, service_id, by = c("file_id", "service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
}
if (exists("route_id")) {
trips <- dplyr::left_join(trips, route_id, by = c("file_id", "route_id"))
trips <- trips[, c("route_id_new", "service_id", "trip_id", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
}
trips <- trips[, c("route_id", "service_id", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
# Condense Duplicate Service patterns
message("Condensing duplicated servie patterns")
calendar_dates_summary <- dplyr::group_by(calendar_dates, service_id)
calendar_dates_summary <- dplyr::summarise(calendar_dates_summary,
pattern = paste(c(date, exception_type), collapse = "")
)
calendar_summary <- dplyr::left_join(calendar, calendar_dates_summary, by = "service_id")
calendar_summary <- dplyr::group_by(
calendar_summary,
start_date, end_date, monday, tuesday, wednesday,
thursday, friday, saturday, sunday, pattern
)
calendar_summary$service_id_new <- dplyr::group_indices(calendar_summary)
calendar_summary <- calendar_summary[, c("service_id_new", "service_id")]
trips <- dplyr::left_join(trips, calendar_summary, by = c("service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
calendar <- dplyr::left_join(calendar, calendar_summary, by = c("service_id"))
calendar <- calendar[, c("service_id_new", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")
calendar <- calendar[!duplicated(calendar$service_id), ]
calendar_dates <- dplyr::left_join(calendar_dates, calendar_summary, by = c("service_id"))
calendar_dates <- calendar_dates[, c("service_id_new", "date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
calendar_dates <- calendar_dates[!duplicated(calendar_dates$service_id), ]
stop_times$file_id <- NULL
routes$file_id <- NULL
res_final <- list(agency, stops, routes, trips, stop_times, calendar, calendar_dates)
names(res_final) <- c("agency", "stops", "routes", "trips", "stop_times", "calendar", "calendar_dates")
return(res_final)
}
#' merge a list of gtfs files
#'
#' @param gtfs_list a list of gtfs objects to be merged
#' @export
gtfs_merge <- function(gtfs_list) {
# remove any NULLS
gtfs_list <- gtfs_list[lengths(gtfs_list) != 0]
# Split out lists
agency <- sapply(gtfs_list, "[", "agency")
stops <- sapply(gtfs_list, "[", "stops")
routes <- sapply(gtfs_list, "[", "routes")
trips <- sapply(gtfs_list, "[", "trips")
stop_times <- sapply(gtfs_list, "[", "stop_times")
calendar <- sapply(gtfs_list, "[", "calendar")
calendar_dates <- sapply(gtfs_list, "[", "calendar_dates")
# bind togther
names(agency) <- seq(1, length(agency))
suppressWarnings(agency <- dplyr::bind_rows(agency, .id = "file_id"))
names(stops) <- seq(1, length(stops))
suppressWarnings(stops <- dplyr::bind_rows(stops, .id = "file_id"))
names(routes) <- seq(1, length(routes))
suppressWarnings(routes <- dplyr::bind_rows(routes, .id = "file_id"))
names(trips) <- seq(1, length(trips))
suppressWarnings(trips <- dplyr::bind_rows(trips, .id = "file_id"))
names(stop_times) <- seq(1, length(stop_times))
suppressWarnings(stop_times <- dplyr::bind_rows(stop_times, .id = "file_id"))
names(calendar) <- seq(1, length(calendar))
suppressWarnings(calendar <- dplyr::bind_rows(calendar, .id = "file_id"))
names(calendar_dates) <- seq(1, length(calendar_dates))
suppressWarnings(calendar_dates <- dplyr::bind_rows(calendar_dates, .id = "file_id"))
# fix typo
agency$agency_name[agency$agency_name == "Dockland Light Railway"] <- "Docklands Light Railway"
# agency
agency$file_id <- NULL
agency <- unique(agency)
if (any(duplicated(agency$agency_id))) {
# Check for upppercase problems
# Sometime same agency with a captial letter in the name
agency.check <- agency
agency.check$agency_name <- tolower(agency.check$agency_name)
agency.check <- unique(agency.check)
if (any(duplicated(agency.check$agency_id))) {
stop("Duplicated Agency IDS")
} else {
agency <- agency[!duplicated(agency$agency_id), ]
}
}
# stops
stops$file_id <- NULL
stops <- unique(stops)
if (any(duplicated(stops$stop_id))) {
stop("Duplicated Stop IDS")
}
# routes
if (any(duplicated(routes$route_id))) {
message("De-duplicating route_id")
route_id <- routes[, c("file_id", "route_id")]
if (any(duplicated(route_id))) {
stop("Duplicated route_id within the same GTFS file")
}
route_id$route_id_new <- seq(1, nrow(route_id))
routes <- dplyr::left_join(routes, route_id, by = c("file_id", "route_id"))
routes <- routes[, c("route_id_new", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type")]
names(routes) <- c("route_id", "agency_id", "route_short_name", "route_long_name", "route_desc", "route_type")
}
# calendar
if (any(duplicated(calendar$service_id))) {
message("De-duplicating service_id")
service_id <- calendar[, c("file_id", "service_id")]
if (any(duplicated(service_id))) {
stop("Duplicated service_id within the same GTFS file")
}
service_id$service_id_new <- seq(1, nrow(service_id))
calendar <- dplyr::left_join(calendar, service_id, by = c("file_id", "service_id"))
calendar <- calendar[, c("service_id_new", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")
calendar_dates <- dplyr::left_join(calendar_dates, service_id, by = c("file_id", "service_id"))
calendar_dates <- calendar_dates[, c("service_id_new", "date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
}
# Trips
if (any(duplicated(trips$trip_id))) {
message("De-duplicating trip_id")
trip_id <- trips[, c("file_id", "trip_id")]
if (any(duplicated(trip_id))) {
stop("Duplicated trip_id within the same GTFS file")
}
trip_id$trip_id_new <- seq(1, nrow(trip_id))
trips <- dplyr::left_join(trips, trip_id, by = c("file_id", "trip_id"))
trips <- trips[, c("route_id", "service_id", "trip_id_new", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
stop_times <- dplyr::left_join(stop_times, trip_id, by = c("file_id", "trip_id"))
stop_times <- stop_times[, c("trip_id_new", "arrival_time", "departure_time", "stop_id", "stop_sequence", "timepoint")]
names(stop_times) <- c("trip_id", "arrival_time", "departure_time", "stop_id", "stop_sequence", "timepoint")
}
if (exists("service_id")) {
trips <- dplyr::left_join(trips, service_id, by = c("file_id", "service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
}
if (exists("route_id")) {
trips <- dplyr::left_join(trips, route_id, by = c("file_id", "route_id"))
trips <- trips[, c("route_id_new", "service_id", "trip_id", "file_id")]
names(trips) <- c("route_id", "service_id", "trip_id", "file_id")
}
trips <- trips[, c("route_id", "service_id", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
# Condense Duplicate Service patterns
message("Condensing duplicated servie patterns")
calendar_dates_summary <- dplyr::group_by(calendar_dates, service_id)
calendar_dates_summary <- dplyr::summarise(calendar_dates_summary,
pattern = paste(c(date, exception_type), collapse = "")
)
calendar_summary <- dplyr::left_join(calendar, calendar_dates_summary, by = "service_id")
calendar_summary <- dplyr::group_by(
calendar_summary,
start_date, end_date, monday, tuesday, wednesday,
thursday, friday, saturday, sunday, pattern
)
calendar_summary$service_id_new <- dplyr::group_indices(calendar_summary)
calendar_summary <- calendar_summary[, c("service_id_new", "service_id")]
trips <- dplyr::left_join(trips, calendar_summary, by = c("service_id"))
trips <- trips[, c("route_id", "service_id_new", "trip_id")]
names(trips) <- c("route_id", "service_id", "trip_id")
calendar <- dplyr::left_join(calendar, calendar_summary, by = c("service_id"))
calendar <- calendar[, c("service_id_new", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")]
names(calendar) <- c("service_id", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "start_date", "end_date")
calendar <- calendar[!duplicated(calendar$service_id), ]
calendar_dates <- dplyr::left_join(calendar_dates, calendar_summary, by = c("service_id"))
calendar_dates <- calendar_dates[, c("service_id_new", "date", "exception_type")]
names(calendar_dates) <- c("service_id", "date", "exception_type")
calendar_dates <- calendar_dates[!duplicated(calendar_dates$service_id), ]
stop_times$file_id <- NULL
routes$file_id <- NULL
res_final <- list(agency, stops, routes, trips, stop_times, calendar, calendar_dates)
names(res_final) <- c("agency", "stops", "routes", "trips", "stop_times", "calendar", "calendar_dates")
return(res_final)
}
a <- gtfs_merge(list("uno.zip", "due.zip", "tre.zip"))
merge_gtfs_feeds <- function(gtfs_list){
# read all fees separately
all_feeds <- lapply(gtfs_list, read_gtfs)
create_new_ids <- function(i, id, files){
values <- function(i, mfile, id)
all_feeds[[i]][[mfile]][[id]]
ids <- as.vector(unlist(sapply(files, function(mfile) values(i, mfile, id))))
new_ids <- paste0(i, "_", seq_along(ids))
for(mfile in files){
if(!is.null(all_feeds[[i]][[mfile]])){
positions <- match(values(i, mfile, id), ids)
all_feeds[[i]][[mfile]][[id]] <- new_ids[positions]
}
}
}
for(i in seq_along(all_feeds)){
create_new_ids(i, "shape_id",   c("shapes", "trips"))
create_new_ids(i, "agency_id",  c("agency", "routes"))
create_new_ids(i, "route_id",   c("routes", "trips"))
create_new_ids(i, "trip_id",    c("trips", "stop_times"))
create_new_ids(i, "stop_id",    c("stop_times", "stops"))
create_new_ids(i, "service_id", c("trips", "calendar"))
create_new_ids(i, "trip_id",    c("trips", "frequencies", "stop_times"))
}
# separate 1st feed
new_gtfs <- list()
# function to extract elements in a series of lists
extract_list_element <- function(i, element){ all_feeds[[i]][[element]] }
## piling up
# 1/8 agency
new_gtfs$agency <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'agency') %>% data.table::rbindlist(fill = TRUE)
# 2/8 routes
new_gtfs$routes <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'routes') %>% data.table::rbindlist(fill = TRUE)
# 3/8 stops
new_gtfs$stops <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'stops') %>% data.table::rbindlist(fill = TRUE)
# 4/8 stop_times
new_gtfs$stop_times <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'stop_times') %>% data.table::rbindlist(fill = TRUE)
# 5/8 shapes
new_gtfs$shapes <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'shapes') %>% data.table::rbindlist(fill = TRUE)
# 6/8 trips
new_gtfs$trips <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'trips') %>% data.table::rbindlist(fill = TRUE)
# 7/8 calendar
new_gtfs$calendar <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'calendar') %>% data.table::rbindlist(fill = TRUE)
# 8/8 frequencies
new_gtfs$frequencies <- lapply(X = seq_along(all_feeds), FUN = extract_list_element, 'frequencies') %>% data.table::rbindlist(fill =TRUE)
return(new_gtfs)
}
setwd("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Accessibility public transit/GTFS/Addis")
a <- merge_gtfs_feeds(list("uno.zip", "due.zip"))
library(tidyverse)
a <- merge_gtfs_feeds(list("uno.zip", "due.zip"))
a <- merge_gtfs_feeds(list("uno.zip", "due.zip", "tre.zip"))
setwd("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Accessibility public transit/GTFS/Addis")
library(tidyverse)
a <- merge_gtfs_feeds(list("uno.zip", "due.zip", "tre.zip"))
gtfs2gps::write_gtfs(a, "Addis.zip")
setwd("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Accessibility public transit/GTFS/Harare")
a <- merge_gtfs_feeds(list("uno.zip", "due.zip"))
gtfs2gps::write_gtfs(a, "Harare.zip")
